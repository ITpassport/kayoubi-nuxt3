declare const _default: import("h3").EventHandler<import("../../types").ParsedContent[] | {
    _dir: Omit<import("../../types").ParsedContent, "_">;
    length: number;
    toString(): string;
    toLocaleString(): string;
    pop(): import("../../types").ParsedContent;
    push(...items: import("../../types").ParsedContent[]): number;
    concat(...items: ConcatArray<import("../../types").ParsedContent>[]): import("../../types").ParsedContent[];
    concat(...items: (import("../../types").ParsedContent | ConcatArray<import("../../types").ParsedContent>)[]): import("../../types").ParsedContent[];
    join(separator?: string): string;
    reverse(): import("../../types").ParsedContent[];
    shift(): import("../../types").ParsedContent;
    slice(start?: number, end?: number): import("../../types").ParsedContent[];
    sort(compareFn?: (a: import("../../types").ParsedContent, b: import("../../types").ParsedContent) => number): import("../../types").ParsedContent[];
    splice(start: number, deleteCount?: number): import("../../types").ParsedContent[];
    splice(start: number, deleteCount: number, ...items: import("../../types").ParsedContent[]): import("../../types").ParsedContent[];
    unshift(...items: import("../../types").ParsedContent[]): number;
    indexOf(searchElement: import("../../types").ParsedContent, fromIndex?: number): number;
    lastIndexOf(searchElement: import("../../types").ParsedContent, fromIndex?: number): number;
    every<S extends import("../../types").ParsedContent>(predicate: (value: import("../../types").ParsedContent, index: number, array: import("../../types").ParsedContent[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: import("../../types").ParsedContent, index: number, array: import("../../types").ParsedContent[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: import("../../types").ParsedContent, index: number, array: import("../../types").ParsedContent[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: import("../../types").ParsedContent, index: number, array: import("../../types").ParsedContent[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: import("../../types").ParsedContent, index: number, array: import("../../types").ParsedContent[]) => U, thisArg?: any): U[];
    filter<S_1 extends import("../../types").ParsedContent>(predicate: (value: import("../../types").ParsedContent, index: number, array: import("../../types").ParsedContent[]) => value is S_1, thisArg?: any): S_1[];
    filter(predicate: (value: import("../../types").ParsedContent, index: number, array: import("../../types").ParsedContent[]) => unknown, thisArg?: any): import("../../types").ParsedContent[];
    reduce(callbackfn: (previousValue: import("../../types").ParsedContent, currentValue: import("../../types").ParsedContent, currentIndex: number, array: import("../../types").ParsedContent[]) => import("../../types").ParsedContent): import("../../types").ParsedContent;
    reduce(callbackfn: (previousValue: import("../../types").ParsedContent, currentValue: import("../../types").ParsedContent, currentIndex: number, array: import("../../types").ParsedContent[]) => import("../../types").ParsedContent, initialValue: import("../../types").ParsedContent): import("../../types").ParsedContent;
    reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: import("../../types").ParsedContent, currentIndex: number, array: import("../../types").ParsedContent[]) => U_1, initialValue: U_1): U_1;
    reduceRight(callbackfn: (previousValue: import("../../types").ParsedContent, currentValue: import("../../types").ParsedContent, currentIndex: number, array: import("../../types").ParsedContent[]) => import("../../types").ParsedContent): import("../../types").ParsedContent;
    reduceRight(callbackfn: (previousValue: import("../../types").ParsedContent, currentValue: import("../../types").ParsedContent, currentIndex: number, array: import("../../types").ParsedContent[]) => import("../../types").ParsedContent, initialValue: import("../../types").ParsedContent): import("../../types").ParsedContent;
    reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: import("../../types").ParsedContent, currentIndex: number, array: import("../../types").ParsedContent[]) => U_2, initialValue: U_2): U_2;
    find<S_2 extends import("../../types").ParsedContent>(predicate: (this: void, value: import("../../types").ParsedContent, index: number, obj: import("../../types").ParsedContent[]) => value is S_2, thisArg?: any): S_2;
    find(predicate: (value: import("../../types").ParsedContent, index: number, obj: import("../../types").ParsedContent[]) => unknown, thisArg?: any): import("../../types").ParsedContent;
    findIndex(predicate: (value: import("../../types").ParsedContent, index: number, obj: import("../../types").ParsedContent[]) => unknown, thisArg?: any): number;
    fill(value: import("../../types").ParsedContent, start?: number, end?: number): import("../../types").ParsedContent[];
    copyWithin(target: number, start: number, end?: number): import("../../types").ParsedContent[];
    entries(): IterableIterator<[number, import("../../types").ParsedContent]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<import("../../types").ParsedContent>;
    includes(searchElement: import("../../types").ParsedContent, fromIndex?: number): boolean;
    flatMap<U_3, This = undefined>(callback: (this: This, value: import("../../types").ParsedContent, index: number, array: import("../../types").ParsedContent[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
    flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
    [Symbol.iterator](): IterableIterator<import("../../types").ParsedContent>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
    at(index: number): import("../../types").ParsedContent;
    _path: any;
}>;
export default _default;
